{
  "version": 3,
  "file": "universal-mairie-sdk.umd.min.js",
  "sources": [
    "ng://universal-mairie-sdk/out/src/app/modules/universal-mairie-sdk/universal-mairie-sdk.module.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/services/article.service.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/services/association-announce.service.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/services/association-subscription.service.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/services/association.service.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/services/directory-category.service.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/services/discussion-message.service.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/services/firebase.service.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/services/discussion.service.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/services/news.service.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/services/report.service.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/services/session.service.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/services/shop.service.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/services/townhall-feature.service.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/services/townhall.service.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/services/user.service.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/services/weather.service.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/models/article.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/models/association.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/models/directory_category.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/models/news.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/models/report.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/models/shop.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/models/user.ts",
    "ng://universal-mairie-sdk/out/src/app/modules/models/weather.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { ArticleService } from '../services/article.service';\r\nimport { AssociationAnnounceService } from '../services/association-announce.service';\r\nimport { AssociationSubscriptionService } from '../services/association-subscription.service';\r\nimport { AssociationService } from '../services/association.service';\r\nimport { DirectoryCategoryService } from '../services/directory-category.service';\r\nimport { DiscussionMessageService } from '../services/discussion-message.service';\r\nimport { DiscussionService } from '../services/discussion.service';\r\nimport { FirebaseService } from '../services/firebase.service';\r\nimport { NewsService } from '../services/news.service';\r\nimport { ReportService } from '../services/report.service';\r\nimport { SessionService } from '../services/session.service';\r\nimport { ShopService } from '../services/shop.service';\r\nimport { TownhallFeatureService } from '../services/townhall-feature.service';\r\nimport { TownhallService } from '../services/townhall.service';\r\nimport { UserService } from '../services/user.service';\r\nimport { WeatherService } from '../services/weather.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [],\r\n  providers: []\r\n})\r\nexport class UniversalMairieSdkModule { \r\n  static UNIVERSAL_CONFIG = {\r\n    API_URL: '',\r\n    FIREBASE_API_KEY: '',\r\n    FIREBASE_AUTH_DOMAIN: '',\r\n    FIREBASE_DATABASE_URL: '',\r\n    FIREBASE_STORAGE_BUCKET: ''\r\n  }\r\n\r\n  public static forRoot(ENV): ModuleWithProviders {\r\n    // UniversalMairieSdkModule.UNIVERSAL_CONFIG = ENV;\r\n\r\n    return {ngModule: UniversalMairieSdkModule, providers: []};\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { UniversalMairieSdkModule } from '../universal-mairie-sdk/universal-mairie-sdk.module';\r\nimport { ArticleModel } from '../models/article';\r\n\r\n@Injectable()\r\nexport class ArticleService {\r\n  constructor(private _http: HttpClient) {\r\n\r\n  }\r\n\r\n  getArticles(townhall: number): Observable<ArticleModel[]> {\r\n    return this._http\r\n      .get<ArticleModel[]>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/articles');\r\n  }\r\n\r\n  getArticleById(townhall: number, id: number): Observable<ArticleModel> {\r\n    return this._http\r\n      .get<ArticleModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/articles/' + id);\r\n  }\r\n\r\n  updateArticleById(townhall: number, id: number, newArticle: ArticleModel): Observable<ArticleModel> {\r\n    return this._http\r\n      .patch<ArticleModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/articles/' + id, { newArticle: newArticle });\r\n  }\r\n\r\n  deleteArticleById(townhall: number, id: number): Observable<void> {\r\n    return this._http\r\n      .delete<void>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/articles/' + id);\r\n  }\r\n\r\n  createArticle(townhall: number, article: ArticleModel): Observable<ArticleModel> {\r\n    return this._http\r\n      .post<ArticleModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/articles', { article: article });\r\n  }\r\n}",
    "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { UniversalMairieSdkModule } from '../universal-mairie-sdk/universal-mairie-sdk.module';\r\nimport { AssociationAnnounceModel } from '../models/association_announce';\r\n\r\n@Injectable()\r\nexport class AssociationAnnounceService {\r\n  constructor(private _http: HttpClient) {\r\n\r\n  }\r\n\r\n  getAssociationAnnounce(townhall: number, association_id: number): Observable<AssociationAnnounceModel[]> {\r\n    return this._http\r\n      .get<AssociationAnnounceModel[]>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/associations/' + association_id + '/announces');\r\n  }\r\n\r\n  getAssociationAnnounceById(townhall: number, association_id: number, id: number): Observable<AssociationAnnounceModel> {\r\n    return this._http\r\n      .get<AssociationAnnounceModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/associations/' + association_id + '/announces/' + id);\r\n  }\r\n\r\n  updateAssociationAnnounceById(townhall: number, association_id: number, id: number, newAnnounce: AssociationAnnounceModel): Observable<AssociationAnnounceModel> {\r\n    return this._http\r\n      .patch<AssociationAnnounceModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/associations/' + association_id + '/announces/' + id, { newAnnounce: newAnnounce });\r\n  }\r\n\r\n  /*deleteAssociationAnnounceById(townhall: number, id: number): Observable<void> {\r\n    return this._http\r\n      .delete(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/announces/' + id)\r\n      .map((r) => r.json());\r\n  }*/\r\n\r\n  createAssociationAnnounce(townhall: number, association_id: number, announce: AssociationAnnounceModel): Observable<AssociationAnnounceModel> {\r\n    return this._http\r\n      .post<AssociationAnnounceModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/associations/' + association_id + '/announces', { announce: announce });\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { UniversalMairieSdkModule } from '../universal-mairie-sdk/universal-mairie-sdk.module';\r\nimport { AssociationSubscriptionModel } from '../models/association_subscription';\r\n\r\n@Injectable()\r\nexport class AssociationSubscriptionService {\r\n  constructor(private _http: HttpClient) {\r\n\r\n  }\r\n\r\n  getAssociationSubscriptions(townhall: number, association_id: number): Observable<AssociationSubscriptionModel[]> {\r\n    return this._http\r\n      .get<AssociationSubscriptionModel[]>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/associations/' + association_id + '/subscriptions');\r\n  }\r\n\r\n  getAssociationSubscriptionById(townhall: number, association_id: number, id: number): Observable<AssociationSubscriptionModel> {\r\n    return this._http\r\n      .get<AssociationSubscriptionModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/associations/' + association_id + '/subscriptions/' + id);\r\n  }\r\n\r\n  deleteAssociationSubscriptionById(townhall: number, id: number): Observable<void> {\r\n    return this._http\r\n      .delete<void>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/associations/' + 0 + '/subscriptions/' + id);\r\n  }\r\n\r\n  createAssociationSubscription(townhall: number, association_id: number, subscription: AssociationSubscriptionModel): Observable<AssociationSubscriptionModel> {\r\n    return this._http\r\n      .post<AssociationSubscriptionModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/associations/' + association_id + '/subscriptions', { subscription: subscription });\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { UniversalMairieSdkModule } from '../universal-mairie-sdk/universal-mairie-sdk.module';\r\nimport { AssociationModel } from '../models/association';\r\n\r\n@Injectable()\r\nexport class AssociationService {\r\n  constructor(private _http: HttpClient) {\r\n\r\n  }\r\n\r\n  getAssociations(townhall: number, query?: any): Observable<AssociationModel[]> {\r\n    let queryString = \"?\";\r\n\r\n    for (let queryName in query) {\r\n      queryString += queryName + \"=\" + query[queryName];\r\n    }\r\n\r\n    return this._http\r\n      .get<AssociationModel[]>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/associations' + queryString);\r\n  }\r\n\r\n  getAssociationById(townhall: number, id: number): Observable<AssociationModel> {\r\n    return this._http\r\n      .get<AssociationModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/associations/' + id);\r\n  }\r\n\r\n  updateAssociationById(townhall: number, id: number, newAssociation: AssociationModel): Observable<AssociationModel> {\r\n    return this._http\r\n      .patch<AssociationModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/associations/' + id, { newAssociation: newAssociation });\r\n  }\r\n\r\n  deleteAssociationById(townhall: number, id: number): Observable<void> {\r\n    return this._http\r\n      .delete<void>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/associations/' + id);\r\n  }\r\n\r\n  createAssociation(townhall: number, association: AssociationModel): Observable<AssociationModel> {\r\n    return this._http\r\n      .post<AssociationModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/associations', { association: association });\r\n  }\r\n\r\n  validateAssociationById(townhall: number, id: number): Observable<AssociationModel> {\r\n    return this._http\r\n      .patch<AssociationModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/associations/' + id + '/validate', {});\r\n      \r\n  }\r\n\r\n  associateAssociationToUser(townhall: number, uuid: string, token: string): Observable<AssociationModel> {\r\n    return this._http\r\n      .patch<AssociationModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/associations/' + 0 + '/associate', { token: token, uuid: uuid });\r\n        }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { UniversalMairieSdkModule } from '../universal-mairie-sdk/universal-mairie-sdk.module';\r\nimport { DirectoryCategoryModel } from '../models/directory_category';\r\nimport { ShopModel } from '../models/shop';\r\n\r\n@Injectable()\r\nexport class DirectoryCategoryService {\r\n  constructor(private _http: HttpClient) {\r\n\r\n  }\r\n\r\n  getDirectoryCategories(townhall: number): Observable<DirectoryCategoryModel[]> {\r\n    return this._http\r\n      .get<DirectoryCategoryModel[]>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/directory_categories/');\r\n     \r\n  }\r\n\r\n  getShopsForDirectoryCategory(townhall: number, id: number): Observable<ShopModel[]> {\r\n    return this._http\r\n      .get<ShopModel[]>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/directory_categories/' + id + '/shops');\r\n      \r\n  }\r\n\r\n  getShopsForDirectory(townhall: number): Observable<ShopModel[]> {\r\n    return this._http\r\n      .get<ShopModel[]>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/shops');\r\n  }\r\n\r\n  getAssociationsForDirectory(townhall: number): Observable<ShopModel[]> {\r\n    return this._http\r\n      .get<ShopModel[]>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/associations');\r\n  }\r\n\r\n  getAssociationsForDirectoryCategory(townhall: number, id: number): Observable<ShopModel[]> {\r\n    return this._http\r\n      .get<ShopModel[]>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/directory_categories/' + id + '/associations');\r\n  }\r\n\r\n  updateDirectoryCategoryById(townhall: number, id: number, newDirectoryCategory: DirectoryCategoryModel): Observable<DirectoryCategoryModel> {\r\n    return this._http\r\n      .patch<DirectoryCategoryModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/discussions/' + id, { newDirectoryCategory: newDirectoryCategory });\r\n  }\r\n\r\n  deleteDiscussionById(townhall: number, id: number): Observable<void> {\r\n    return this._http\r\n      .delete<void>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/discussions/' + id);\r\n  }\r\n\r\n  createDirectoryCategory(townhall: number, directory_category: DirectoryCategoryModel, under_category_id: number): Observable<DirectoryCategoryModel> {\r\n    return this._http\r\n      .post<DirectoryCategoryModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/directory_categories/', { directory_category: directory_category, under_category_id: under_category_id });\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { UniversalMairieSdkModule } from '../universal-mairie-sdk/universal-mairie-sdk.module';\r\nimport { DiscussionMessageModel } from '../models/discussion_message';\r\n\r\n@Injectable()\r\nexport class DiscussionMessageService {\r\n  constructor(private _http: HttpClient) {\r\n\r\n  }\r\n\r\n  getDiscussionMessages(townhall: number, discussion_id: number): Observable<DiscussionMessageModel[]> {\r\n    return this._http\r\n      .get<DiscussionMessageModel[]>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/discussions/' + discussion_id + '/messages');\r\n  }\r\n\r\n  updateDiscussionMessageById(townhall: number, discussion_id: number, id: number, newDiscussionMessage: DiscussionMessageModel): Observable<DiscussionMessageModel> {\r\n    return this._http\r\n      .patch<DiscussionMessageModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/discussions/' + discussion_id + '/messages/' + id, { newDiscussionMessage: newDiscussionMessage });\r\n  }\r\n\r\n  deleteDiscussionById(townhall: number, discussion_id: number, id: number): Observable<void> {\r\n    return this._http\r\n      .delete<void>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/discussions/' + discussion_id + '/messages/' + id);\r\n  }\r\n\r\n  createDiscussionMessage(townhall: number, discussion_id: number, discussion_message: DiscussionMessageModel): Observable<DiscussionMessageModel> {\r\n    return this._http\r\n      .post<DiscussionMessageModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/discussions/' + discussion_id + '/messages', { discussionMessage: discussion_message });\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\n\r\nimport { UniversalMairieSdkModule } from '../universal-mairie-sdk/universal-mairie-sdk.module';\r\n\r\nimport * as Firebase from 'firebase';\r\n\r\nlet universal_firebase_config;\r\n\r\n@Injectable()\r\nexport class FirebaseService {\r\n  public storage: Firebase.storage.Storage;\r\n\r\n  constructor() {\r\n    universal_firebase_config = {\r\n      apiKey: UniversalMairieSdkModule.UNIVERSAL_CONFIG.FIREBASE_API_KEY,\r\n      authDomain: UniversalMairieSdkModule.UNIVERSAL_CONFIG.FIREBASE_AUTH_DOMAIN,\r\n      databaseURL: UniversalMairieSdkModule.UNIVERSAL_CONFIG.FIREBASE_DATABASE_URL,\r\n      storageBucket: UniversalMairieSdkModule.UNIVERSAL_CONFIG.FIREBASE_STORAGE_BUCKET\r\n    };\r\n\r\n    Firebase.initializeApp(universal_firebase_config);\r\n\r\n    this.storage = Firebase.storage();\r\n  }\r\n\r\n  uploadText(base64Image): Firebase.storage.UploadTask {\r\n    var testRef = this.storage.ref('test/test.txt');\r\n    return testRef.putString(base64Image, 'base64');\r\n  }\r\n\r\n  uploadImage(name, folder, base64Image): Firebase.storage.UploadTask {\r\n    var testRef = this.storage.ref(folder + '/' + name);\r\n    return testRef.putString(base64Image, 'base64');\r\n  }\r\n\r\n  getImage(ref): Promise<any> {\r\n    var imageRef = this.storage.ref(ref);\r\n    return imageRef.getDownloadURL();\r\n  }\r\n\r\n  getNewFileName(name): string {\r\n    let date = new Date();\r\n\r\n    return name + '-' + date.getDate() + '-' + date.getMonth() + '-' + date.getFullYear() + '-' + date.getHours() + ':' + date.getMinutes();\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { UniversalMairieSdkModule } from '../universal-mairie-sdk/universal-mairie-sdk.module';\r\nimport { DiscussionModel } from '../models/discussion';\r\n\r\n@Injectable()\r\nexport class DiscussionService {\r\n  constructor(private _http: HttpClient) {\r\n\r\n  }\r\n\r\n  getDiscussions(townhall: number): Observable<DiscussionModel[]> {\r\n    return this._http\r\n      .get<DiscussionModel[]>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/discussions');\r\n  }\r\n\r\n  getUsersDiscussions(townhall: number, id: number): Observable<DiscussionModel[]> {\r\n    return this._http\r\n      .get<DiscussionModel[]>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/users/' + id + '/discussions');\r\n  }\r\n\r\n  getDiscussionById(townhall: number, id: number): Observable<DiscussionModel> {\r\n    return this._http\r\n      .get<DiscussionModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/discussions/' + id);\r\n  }\r\n\r\n  updateDiscussionById(townhall: number, id: number, newDiscussion: DiscussionModel): Observable<DiscussionModel> {\r\n    return this._http\r\n      .patch<DiscussionModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/discussions/' + id, { newDiscussion: newDiscussion });\r\n  }\r\n\r\n  deleteDiscussionById(townhall: number, id: number): Observable<void> {\r\n    return this._http\r\n      .delete<void>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/discussions/' + id);\r\n  }\r\n\r\n  createDiscussion(townhall: number, discussion: DiscussionModel): Observable<DiscussionModel> {\r\n    return this._http\r\n      .post<DiscussionModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/discussions', { discussion: discussion });\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { UniversalMairieSdkModule } from '../universal-mairie-sdk/universal-mairie-sdk.module';\r\nimport { NewsModel } from '../models/news';\r\n\r\n@Injectable()\r\nexport class NewsService {\r\n  constructor(private _http: HttpClient) {\r\n\r\n  }\r\n\r\n  getNews(townhall: number): Observable<NewsModel[]> {\r\n    console.log(\"NENENENENNENEWS !\");\r\n\r\n    return this._http\r\n      .get<NewsModel[]>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/news');\r\n  }\r\n\r\n  getNewsById(townhall: number, id: number): Observable<NewsModel> {\r\n    return this._http\r\n      .get<NewsModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/news/' + id);\r\n  }\r\n\r\n  updateNewsById(townhall: number, id: number, newNews: NewsModel): Observable<NewsModel> {\r\n    return this._http\r\n      .patch<NewsModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/news/' + id, { newNews: newNews });\r\n  }\r\n\r\n  deleteNewsById(townhall: number, id: number): Observable<void> {\r\n    return this._http\r\n      .delete<void>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/news/' + id);\r\n  }\r\n\r\n  createNews(townhall: number, news: NewsModel, notification?: boolean): Observable<NewsModel> {\r\n    if (!notification) {\r\n      notification = false;\r\n    }\r\n\r\n    return this._http\r\n      .post<NewsModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/news', { news: news, notification: notification });\r\n  }\r\n\r\n  createView(townhall: number, id: number, uuid: string): Observable<any> {\r\n    return this._http\r\n      .post<any>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/news/' + id + '/views', { uuid: uuid });\r\n  }\r\n\r\n  getAllNewsViews(townhall: number): Observable<any> {\r\n    return this._http\r\n      .get<any>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/news/views');\r\n  }\r\n\r\n  getNewsViews(townhall: number, id: number): Observable<any> {\r\n    return this._http\r\n      .get<any>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/news/' + id + '/views');\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { UniversalMairieSdkModule } from '../universal-mairie-sdk/universal-mairie-sdk.module';\r\nimport { ReportModel } from '../models/report';\r\n\r\n@Injectable()\r\nexport class ReportService {\r\n  constructor(private _http: HttpClient) {\r\n\r\n  }\r\n\r\n  getReports(townhall: number): Observable<ReportModel[]> {\r\n    return this._http\r\n      .get<ReportModel[]>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/reports');\r\n  }\r\n\r\n  getReportById(townhall: number, id: number): Observable<ReportModel> {\r\n    return this._http\r\n      .get<ReportModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/reports/' + id);\r\n  }\r\n\r\n  updateReportById(townhall: number, id: number, newReport: ReportModel): Observable<ReportModel> {\r\n    return this._http\r\n      .patch<ReportModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/reports/' + id, { newReport: newReport });\r\n  }\r\n\r\n  deleteReportById(townhall: number, id: number): Observable<void> {\r\n    return this._http\r\n      .delete<void>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/reports/' + id);\r\n  }\r\n\r\n  createReport(townhall: number, report: ReportModel): Observable<ReportModel> {\r\n    return this._http\r\n      .post<ReportModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/reports', { report: report });\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { UniversalMairieSdkModule } from '../universal-mairie-sdk/universal-mairie-sdk.module';\r\nimport { UserModel } from '../models/user';\r\n\r\n\r\n@Injectable()\r\nexport class SessionService {\r\n  constructor(private _http: HttpClient) {\r\n\r\n  }\r\n\r\n  signin(email: string, password: string): Observable<UserModel> {\r\n    return this._http\r\n      .post<UserModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/sessions', { email: email, password: password });\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { UniversalMairieSdkModule } from '../universal-mairie-sdk/universal-mairie-sdk.module';\r\nimport { ShopModel } from '../models/shop';\r\n\r\n@Injectable()\r\nexport class ShopService {\r\n  constructor(private _http: HttpClient) {\r\n\r\n  }\r\n\r\n  getShops(townhall: number): Observable<ShopModel[]> {\r\n    return this._http\r\n      .get<ShopModel[]>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/shops');\r\n  }\r\n\r\n  getShopById(townhall: number, id: number): Observable<ShopModel> {\r\n    return this._http\r\n      .get<ShopModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/shops/' + id);\r\n  }\r\n\r\n  updateShopById(townhall: number, id: number, newShop: ShopModel): Observable<ShopModel> {\r\n    return this._http\r\n      .patch<ShopModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/shops/' + id, { newShop: newShop });\r\n  }\r\n\r\n  deleteShopById(townhall: number, id: number): Observable<void> {\r\n    return this._http\r\n      .delete<void>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/shops/' + id);\r\n  }\r\n\r\n  createShop(townhall: number, shop: ShopModel): Observable<ShopModel> {\r\n    return this._http\r\n      .post<ShopModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/shops', { shop: shop });\r\n  }\r\n\r\n  validateShopById(townhall: number, id: number): Observable<ShopModel> {\r\n    return this._http\r\n      .patch<ShopModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/shops/' + id + '/validate', {});\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { UniversalMairieSdkModule } from '../universal-mairie-sdk/universal-mairie-sdk.module';\r\nimport { TownhallFeatureModel } from '../models/townhall_feature';\r\n\r\n\r\n@Injectable()\r\nexport class TownhallFeatureService {\r\n  constructor(private _http: HttpClient) {\r\n\r\n  }\r\n\r\n  getfeatures(townhall: number): Observable<TownhallFeatureModel> {\r\n    return this._http\r\n      .get<TownhallFeatureModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/townhall_features');\r\n  }\r\n\r\n  updateFeatures(townhall: number, newFeatures: TownhallFeatureModel): Observable<TownhallFeatureModel> {\r\n    return this._http\r\n      .patch<TownhallFeatureModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/townhall_features/', { newFeatures: newFeatures });\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { UniversalMairieSdkModule } from '../universal-mairie-sdk/universal-mairie-sdk.module';\r\nimport { TownhallModel } from '../models/townhall';\r\n\r\n\r\n@Injectable()\r\nexport class TownhallService {\r\n  constructor(private _http: HttpClient) {\r\n\r\n  }\r\n\r\n  getTownhalls(): Observable<TownhallModel[]> {\r\n    return this._http\r\n      .get<TownhallModel[]>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls');\r\n  }\r\n\r\n  getTownhallById(townhall: number): Observable<TownhallModel> {\r\n    return this._http\r\n      .get<TownhallModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall);\r\n  }\r\n\r\n  updateTownhallById(townhall: number, newTownhall: TownhallModel): Observable<TownhallModel> {\r\n    return this._http\r\n      .patch<TownhallModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall, { newTownhall: newTownhall });\r\n  }\r\n\r\n  convertColorToHTML(color: string): string {\r\n    let colors = [\r\n      { color: 'red-500', html: '#f44336' },\r\n      { color: 'pink-500', html: '#e91e63' },\r\n      { color: 'purple-500', html: '#9c27b0' },\r\n      { color: 'deep-purple-500', html: '#673ab7' },\r\n      { color: 'indigo-500', html: '#3f51b5' },\r\n      { color: 'blue-500', html: '#2196f3' },\r\n      { color: 'cyan-500', html: '#00bcd4' },\r\n      { color: 'teal-500', html: '#009688' },\r\n      { color: 'green-500', html: '#4caf50' },\r\n      { color: 'light-green-500', html: '#8bc34a' },\r\n      { color: 'lime-500', html: '#cddc39' },\r\n      { color: 'yellow-500', html: '#ffeb3b' },\r\n      { color: 'amber-500', html: '#ffc107' },\r\n      { color: 'orange-500', html: '#ff9800' },\r\n      { color: 'deep-orange-500', html: '#ff5722' },\r\n      { color: 'brown-500', html: '#795548' },\r\n      { color: 'grey-500', html: '#9e9e9e' }\r\n    ];\r\n\r\n    for (var index = 0; index < colors.length; index++) {\r\n      console.log('Couleur voulue: ' + color + '|' + colors[index].color);\r\n      if (colors[index].color === color) {\r\n        return colors[index].html;\r\n      }\r\n    }\r\n\r\n    return '#9e9e9e';\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { UniversalMairieSdkModule } from '../universal-mairie-sdk/universal-mairie-sdk.module';\r\nimport { UserModel } from '../models/user';\r\n\r\n@Injectable()\r\nexport class UserService {\r\n  constructor(private _http: HttpClient) {\r\n\r\n  }\r\n\r\n  countUsers(townhall: number): Observable<number> {\r\n    return this._http\r\n      .get<number>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/users/count');\r\n  }\r\n\r\n  platformsUsers(townhall: number): Observable<any> {\r\n    return this._http\r\n      .get<any>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/users/platforms');\r\n  }\r\n\r\n  getUserById(townhall: number, id: number): Observable<UserModel> {\r\n    return this._http\r\n      .get<UserModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/users/' + id);\r\n  }\r\n\r\n  getUserByUUID(townhall: number, uuid: string): Observable<UserModel> {\r\n    return this._http\r\n      .get<UserModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/users/' + uuid + '/uuid');\r\n  }\r\n\r\n  createUser(townhall: number, user: UserModel): Observable<UserModel> {\r\n    return this._http\r\n      .post<UserModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/users', { user: user });\r\n  }\r\n}\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { UniversalMairieSdkModule } from '../universal-mairie-sdk/universal-mairie-sdk.module';\r\nimport { WeatherModel } from '../models/weather';\r\n\r\n@Injectable()\r\nexport class WeatherService {\r\n  constructor(private _http: HttpClient) {\r\n  }\r\n\r\n  getWeather(townhall: number): Observable<WeatherModel> {\r\n    return this._http\r\n      .get<WeatherModel>(UniversalMairieSdkModule.UNIVERSAL_CONFIG.API_URL + '/v1/townhalls/' + townhall + '/weather');\r\n  }\r\n\r\n  getWeatherIcon(condition: string): string {\r\n    switch (condition) {\r\n      case 'ensoleille':\r\n        return 'wi-day-sunny';\r\n\r\n      case 'nuit-claire':\r\n        return 'wi-night-clear';\r\n\r\n      case 'ciel-voile':\r\n        return 'wi-day-cloudy';\r\n\r\n      case 'nuit-legerement-voilee':\r\n        return 'wi-night-alt-partly-cloudy';\r\n\r\n      case 'faibles-passages-nuageux':\r\n        return 'wi-day-cloudy';\r\n\r\n      case 'nuit-bien-degagee':\r\n        return 'wi-night-partly-cloudy';\r\n\r\n      case 'brouillard':\r\n        return 'wi-fog';\r\n\r\n      case 'stratus':\r\n        return 'wi-cloud';\r\n\r\n      case 'stratus-se-dissipant':\r\n        return 'wi-day-sunny-overcast';\r\n\r\n      case 'nuit-claire-et-stratus':\r\n        return 'wi-night-alt-cloudy';\r\n\r\n      case 'eclaircies':\r\n        return 'wi-day-cloudy';\r\n\r\n      case 'nuit-nuageuse':\r\n        return 'wi-night-alt-cloudy';\r\n\r\n      case 'faiblement-nuageux':\r\n        return 'wi-cloud';\r\n\r\n      case 'fortement-nuageux':\r\n        return 'wi-cloudy';\r\n\r\n      case 'averses-de-pluie-faible':\r\n        return 'wi-day-showers';\r\n\r\n      case 'nuit-avec-averses':\r\n        return 'wi-night-alt-showers';\r\n\r\n      case 'averses-de-pluie-moderee':\r\n        return 'wi-day-showers';\r\n\r\n      case 'averses-de-pluie-forte':\r\n        return 'wi-day-showers';\r\n\r\n      case 'couvert-avec-averses':\r\n        return 'wi-showers';\r\n\r\n      case 'pluie-faible':\r\n        return 'wi-rain';\r\n\r\n      case 'pluie-forte':\r\n        return 'wi-rain';\r\n\r\n      case 'pluie-moderee':\r\n        return 'wi-rain';\r\n\r\n      case 'developpement-nuageux':\r\n        return 'wi-day-cloudy-high';\r\n\r\n      case 'nuit-avec-developpement-nuageux':\r\n        return 'wi-night-alt-cloudy-high';\r\n\r\n      case 'faiblement-orageux':\r\n        return 'wi-day-thunderstorm';\r\n\r\n      case 'nuit-faiblement-orageuse':\r\n        return 'wi-night-alt-thunderstorm';\r\n\r\n      case 'orage-modere':\r\n        return 'wi-day-thunderstorm';\r\n\r\n      case 'fortement-orageux':\r\n        return 'wi-day-thunderstorm';\r\n\r\n      case 'averses-de-neige-faible':\r\n        return 'wi-day-rain-mix';\r\n\r\n      case 'nuit-avec-averses-de-neige-faible':\r\n        return 'wi-night-alt-rain-mix';\r\n\r\n      case 'neige-faible':\r\n        return 'wi-snow';\r\n\r\n      case 'neige-moderee':\r\n        return 'wi-snow';\r\n\r\n      case 'neige-forte':\r\n        return 'wi-snow';\r\n\r\n      case 'pluie-et-neige-melee-faible':\r\n        return 'wi-rain-mix';\r\n\r\n      case 'pluie-et-neige-melee-moderee':\r\n        return 'wi-rain-mix';\r\n\r\n      case 'pluie-et-neige-melee-forte':\r\n        return 'wi-rain-mix';\r\n\r\n      default:\r\n        return 'wi-day-sunny';\r\n    }\r\n  }\r\n}\r\n",
    "export class ArticleModel {\r\n  id: number;\r\n  title: string;\r\n  subtitle: string;\r\n  image: string;\r\n  content: string;\r\n}\r\n",
    "import { UserModel } from './user'\r\nimport { DirectoryCategoryModel } from './directory_category'\r\n\r\nexport class AssociationModel {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  logo: string;\r\n  directory_category_id: number;\r\n  directory_category: DirectoryCategoryModel;\r\n  validated: boolean;\r\n  user: UserModel;\r\n  token: string;\r\n  topic_created_at?: Date;\r\n  created_at: Date;\r\n}\r\n",
    "export class DirectoryCategoryModel {\r\n  id: number;\r\n  name: string;\r\n  under_categories: DirectoryCategoryModel[];\r\n}\r\n",
    "export class NewsModel {\r\n  id: number;\r\n  title: string;\r\n  image: string;\r\n  description: string;\r\n  content: string;\r\n}\r\n",
    "import { DiscussionModel } from './discussion';\r\n\r\nexport class ReportModel {\r\n  id: number;\r\n  image: string;\r\n  street: string;\r\n  coordinates: string;\r\n  discussion: DiscussionModel;\r\n}\r\n",
    "import { DirectoryCategoryModel } from './directory_category';\r\n\r\nexport class ShopModel {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  logo: string;\r\n  directory_category?: DirectoryCategoryModel;\r\n  directory_category_id: number;\r\n  schedule: string;\r\n  place_id?: string;\r\n  validated: boolean;\r\n}\r\n",
    "import { TownhallModel } from './townhall'\r\n\r\nexport class UserModel {\r\n  id: number;\r\n  email: string;\r\n  password?: string;\r\n  last_sign_in_at: Date;\r\n  last_sign_in_ip: string;\r\n  csr: string;\r\n  uuid: string;\r\n  firebase_token: string;\r\n  platform?: string;\r\n  user_townhalls: {\r\n    id: number;\r\n    townhall_id?: number;\r\n    townhall?: TownhallModel;\r\n    rank: number\r\n  }[]\r\n}\r\n\r\nexport enum RANKS {\r\n  COMM_ADMIN = 90,\r\n  ADMIN = 80,\r\n  ASSOCIATION_MANAGER = 60\r\n}",
    "export class WeatherModel {\r\n  city_info: {\r\n    name: string;\r\n    country: string;\r\n  };\r\n  current_condition: {\r\n    date: string;\r\n    hour: string;\r\n    condition: string;\r\n    condition_key: string;\r\n    icon: string;\r\n    icon_big: string;\r\n    tmp: number;\r\n  };\r\n}\r\n"
  ],
  "names": [
    "UniversalMairieSdkModule",
    "UNIVERSAL_CONFIG",
    "API_URL",
    "FIREBASE_API_KEY",
    "FIREBASE_AUTH_DOMAIN",
    "FIREBASE_DATABASE_URL",
    "decorators",
    "type",
    "NgModule",
    "args",
    "imports",
    "CommonModule",
    "HttpClientModule",
    "declarations",
    "ArticleService",
    "_http",
    "this",
    "prototype",
    "getArticles",
    "townhall",
    "get",
    "getArticleById",
    "id",
    "updateArticleById",
    "newArticle",
    "patch",
    "deleteArticleById",
    "delete",
    "createArticle",
    "article",
    "post",
    "AssociationAnnounceService",
    "getAssociationAnnounce",
    "association_id",
    "getAssociationAnnounceById",
    "updateAssociationAnnounceById",
    "newAnnounce",
    "createAssociationAnnounce",
    "announce",
    "AssociationSubscriptionService",
    "getAssociationSubscriptions",
    "getAssociationSubscriptionById",
    "deleteAssociationSubscriptionById",
    "createAssociationSubscription",
    "subscription",
    "AssociationService",
    "getAssociations",
    "query",
    "queryString",
    "queryName",
    "getAssociationById",
    "updateAssociationById",
    "newAssociation",
    "deleteAssociationById",
    "createAssociation",
    "association",
    "validateAssociationById",
    "associateAssociationToUser",
    "uuid",
    "token",
    "DirectoryCategoryService",
    "getDirectoryCategories",
    "getShopsForDirectoryCategory",
    "getShopsForDirectory",
    "getAssociationsForDirectory",
    "getAssociationsForDirectoryCategory",
    "updateDirectoryCategoryById",
    "newDirectoryCategory",
    "deleteDiscussionById",
    "createDirectoryCategory",
    "directory_category",
    "under_category_id",
    "DiscussionMessageService",
    "getDiscussionMessages",
    "discussion_id",
    "updateDiscussionMessageById",
    "newDiscussionMessage",
    "createDiscussionMessage",
    "discussion_message",
    "discussionMessage",
    "universal_firebase_config",
    "DiscussionService",
    "getDiscussions",
    "getUsersDiscussions",
    "getDiscussionById",
    "updateDiscussionById",
    "newDiscussion",
    "createDiscussion",
    "discussion",
    "FirebaseService",
    "apiKey",
    "authDomain",
    "databaseURL",
    "storageBucket",
    "FIREBASE_STORAGE_BUCKET",
    "initializeApp",
    "storage",
    "uploadText",
    "base64Image",
    "ref",
    "putString",
    "uploadImage",
    "name",
    "folder",
    "getImage",
    "getDownloadURL",
    "getNewFileName",
    "date",
    "Date",
    "getDate",
    "getMonth",
    "getFullYear",
    "getHours",
    "getMinutes",
    "NewsService",
    "getNews",
    "console",
    "log",
    "getNewsById",
    "updateNewsById",
    "newNews",
    "deleteNewsById",
    "createNews",
    "news",
    "notification",
    "createView",
    "getAllNewsViews",
    "getNewsViews",
    "ReportService",
    "getReports",
    "getReportById",
    "updateReportById",
    "newReport",
    "deleteReportById",
    "createReport",
    "report",
    "SessionService",
    "signin",
    "email",
    "password",
    "ShopService",
    "getShops",
    "getShopById",
    "updateShopById",
    "newShop",
    "deleteShopById",
    "createShop",
    "shop",
    "validateShopById",
    "TownhallFeatureService",
    "getfeatures",
    "updateFeatures",
    "newFeatures",
    "TownhallService",
    "getTownhalls",
    "getTownhallById",
    "updateTownhallById",
    "newTownhall",
    "convertColorToHTML",
    "color",
    "colors",
    "html",
    "index",
    "length",
    "UserService",
    "countUsers",
    "platformsUsers",
    "getUserById",
    "getUserByUUID",
    "createUser",
    "user",
    "WeatherService",
    "getWeather",
    "getWeatherIcon",
    "condition",
    "ArticleModel",
    "AssociationModel",
    "NewsModel",
    "TownhallModel"
  ],
  "mappings": "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"
}
